<%= form_for(@rule, builder: PolarisFormBuilder, html: { id: 'rule-form' }) do |f| %>  
  <div class="Polaris-Layout">
    <div class="Polaris-Layout__AnnotatedSection">
      <div class="Polaris-Layout__AnnotationWrapper">
        <div class="Polaris-Layout__Annotation">
          <div class="Polaris-TextContainer">
            <h2 class="Polaris-Heading" id="ruleDetails">
              Details
            </h2>
            <div class="Polaris-Layout__AnnotationDescription">
              <p>
                Configure on which Shopify event you'd like this rule to execute. For more information,
                <a href="https://github.com/christianblais/triggerify/wiki/Rule-Foundation" target="_blank">click here</a>.
              </p>
            </div>
          </div>
        </div>
        <div class="Polaris-Layout__AnnotationContent">
          <div class="Polaris-Card">
            <div class="Polaris-Card__Section">
              <div class="Polaris-FormLayout">
                <%= f.polaris_text_field(:name, placeholder: "name") %>
                <%= f.polaris_check_box(:enabled) %>
                <%= f.polaris_select(:topic, Rule::TOPICS.map { |k,v| [v, k] }, { prompt: 'Select a topic' }, { data: { topic: true } }) %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="filters" class="Polaris-Layout__AnnotatedSection">
      <div class="Polaris-Layout__AnnotationWrapper">
        <div class="Polaris-Layout__Annotation">
          <div class="Polaris-TextContainer">
            <h2 class="Polaris-Heading">
              Filters
            </h2>
            <div class="Polaris-Layout__AnnotationDescription">
              <p>
                Add a filter to ensure actions are only performed when certain criterias are met. Skip this test if you'd like for this action to always execute.
                For more information, <a href="https://github.com/christianblais/triggerify/wiki/Rule-Filters" target="_blank">click here</a>.
                <br><br>
                <button class="Polaris-Button" type="button" data-add="filter">
                  <span class="Polaris-Button__Content">
                    <span class="Polaris-Button__Text">Add filter</span>
                  </span>
                </button>
              </p>
            </div>
          </div>
        </div>
        <div class="Polaris-Layout__AnnotationContent">
          <div data-filter-list>
            <% @rule.filters.each do |filter| %>
              <div class="Polaris-Card" data-section>
                <%= f.fields_for :filters, filter do |ff| %>
                  <%= render 'filter', f: ff %>
                <% end %>
              </div>
            <% end %>
          </div>

          <div style="display: none;" data-filter-template>
            <div class="Polaris-Card" data-section>
              <%= f.fields_for :filters, Filter.new do |ff| %>
                <%= render 'filter', f: ff, destroyed: true %>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="handlers" class="Polaris-Layout__AnnotatedSection">
      <div class="Polaris-Layout__AnnotationWrapper">
        <div class="Polaris-Layout__Annotation">
          <div class="Polaris-TextContainer">
            <h2 class="Polaris-Heading" id="ruleDetails">
              Actions
            </h2>
            <div class="Polaris-Layout__AnnotationDescription">
              <p>
                Configure on which Shopify event you'd like this rule to execute. For more information,
                <a href="https://github.com/christianblais/triggerify/wiki/Rule-Actions" target="_blank">click here</a>.
                <br><br>
                <button class="Polaris-Button" type="button" data-add="handler">
                  <span class="Polaris-Button__Content">
                    <span class="Polaris-Button__Text">Add action</span>
                  </span>
                </button>
              </p>
            </div>
          </div>
        </div>
        <div class="Polaris-Layout__AnnotationContent">
          <div data-handler-list>
            <% @rule.handlers.each do |handler| %>
              <div class="Polaris-Card" data-section>
                <%= f.fields_for :handlers, handler do |ff| %>
                  <%= render 'handler', f: ff %>
                <% end %>
              </div>
            <% end %>
          </div>

          <div style="display: none;" data-handler-template>
            <div class="Polaris-Card" data-section>
              <%= f.fields_for :handlers, Handler.new do |ff| %>
                <%= render 'handler', f: ff, destroyed: true %>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>

  </div>
<% end %>

<script>
  var breadcrumb = Button.create(app, { label: 'Rules' });
  breadcrumb.subscribe(Button.Action.CLICK, () => {
    Turbolinks.visit('<%= rules_path %>');
  });

  var secondaryButtons = [];

  var cancelButton = Button.create(app, { label: 'Cancel' });
  cancelButton.subscribe(Button.Action.CLICK, () => {
    Turbolinks.visit('<%= rules_path %>');
  });
  secondaryButtons.push(cancelButton);

  <% unless @rule.persisted? %>
    var templatesButton = Button.create(app, { label: 'Import from templates' });
    templatesButton.subscribe(Button.Action.CLICK, () => {
      Turbolinks.visit('<%= templates_rules_path %>');
    });
    secondaryButtons.push(templatesButton);
  <% end %>

  var saveButton = Button.create(app, { label: 'Save' });
  saveButton.subscribe(Button.Action.CLICK, () => {
    var form = document.getElementById('rule-form');

    fetch(form.getAttribute('action'), {
      method: 'POST',
      redirect: 'manual',
      headers: { "Authorization": "Bearer " + window.sessionToken },
      body: new FormData(form)
    }).then((response) => {
      if (response.type === "opaqueredirect") {
        Turbolinks.visit(response.url);
      } else {
        response.text().then((response) => {
          Turbolinks.clearCache();
      
          var responseHTML = (new DOMParser()).parseFromString(response, 'text/html');
          document.querySelector('#AppFrameMain').innerHTML = responseHTML.querySelector('#AppFrameMain').innerHTML;
          
          Turbolinks.dispatch("turbolinks:load");
          window.scroll(0, 0);
        })
      }
    })
  });
  
  TitleBar.create(app, {
    title: "<%= @rule.persisted? ? @rule.name : 'New' %>",
    buttons: {
      primary: saveButton,
      secondary: secondaryButtons
    },
    breadcrumbs: breadcrumb,
  });
</script>
