<%= form_for(@rule, html: { id: 'rule-form' }) do |f| %>
  <div class="section">
    <div class="section-summary">
      <h1>Foundation</h1>
      <p>
        Event generated by Shopify on store activity.
        <br>
        <a href="https://github.com/christianblais/triggerify/wiki/Rule-Foundation" target="_blank">
          More information
        </a>
      </p>
    </div>
    <div class="section-content">
      <div class="section-row">
        <div class="section-cell">
          <%= f.label :name %>
          <%= f.text_field :name, placeholder: "name" %>

          <div class="checkbox-wrapper">
            <%= f.label :enabled %>
            <%= f.check_box :enabled, class: "checkbox" %>
          </div>

          <%= f.label :topic %>
          <div class="select-wrapper">
            <%= f.select :topic, Rule::TOPICS.map { |k,v| [v, k] }, { prompt: 'Select a topic' }, { class: 'select', data: { topic: true } } %>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="filters" class="section">
    <div class="section-summary">
      <h1>
        Filters (optional)
      </h1>
      <p>
        When the event match all filters or none are configured, actions will be performed.
        <br>
        <a href="https://github.com/christianblais/triggerify/wiki/Rule-Filters" target="_blank">
          More information
        </a>
      </p>
    </div>
    <div class="section-content">
      <div data-filter-list>
        <% @rule.filters.each do |filter| %>
          <%= f.fields_for :filters, filter do |ff| %>
            <%= render 'filter', f: ff %>
          <% end %>
        <% end %>
      </div>

      <p>
        <button class="btn primary" data-add="filter">
          Add Filter
        </button>

        <div style="display: none;" data-filter-template>
          <%= f.fields_for :filters, Filter.new do |ff| %>
            <%= render 'filter', f: ff, destroyed: true %>
          <% end %>
        </div>
      <p>
    </div>
  </div>

  <div id="handlers" class="section">
    <div class="section-summary">
      <h1>Actions</h1>
      <p>
        Units of work to execute.
        <br>
        <a href="https://github.com/christianblais/triggerify/wiki/Rule-Actions" target="_blank">
          More information
        </a>
      </p>
    </div>
    <div class="section-content" >
      <div data-handler-list>
        <% @rule.handlers.each do |handler| %>
          <%= f.fields_for :handlers, handler do |ff| %>
            <%= render 'handler', f: ff %>
          <% end %>
        <% end %>
      </div>
      <p>
        <button class="btn primary" data-add="handler">
          Add Action
        </button>

        <div style="display: none;" data-handler-template>
          <%= f.fields_for :handlers, Handler.new do |ff| %>
            <%= render 'handler', f: ff, destroyed: true %>
          <% end %>
        </div>
      <p>
    </div>
  </div>
<% end %>

<script>
  var breadcrumb = Button.create(app, { label: 'Rules' });
  breadcrumb.subscribe(Button.Action.CLICK, () => {
    Turbolinks.visit('<%= rules_path %>');
  });

  var secondaryButtons = [];

  var cancelButton = Button.create(app, { label: 'Cancel' });
  cancelButton.subscribe(Button.Action.CLICK, () => {
    Turbolinks.visit('<%= rules_path %>');
  });
  secondaryButtons.push(cancelButton);

  <% unless @rule.persisted? %>
    var templatesButton = Button.create(app, { label: 'Import from templates' });
    templatesButton.subscribe(Button.Action.CLICK, () => {
      Turbolinks.visit('<%= templates_rules_path %>');
    });
    secondaryButtons.push(templatesButton);
  <% end %>

  var saveButton = Button.create(app, { label: 'Save' });
  saveButton.subscribe(Button.Action.CLICK, () => {
    var form = document.getElementById('rule-form');

    fetch(form.getAttribute('action'), {
      method: 'POST',
      redirect: 'manual',
      headers: { "Authorization": "Bearer " + window.sessionToken },
      body: new FormData(form)
    }).then((response) => {
      if (response.type === "opaqueredirect") {
        Turbolinks.visit(response.url);
      } else {
        response.text().then((response) => {
          Turbolinks.clearCache();
      
          var responseHTML = (new DOMParser()).parseFromString(response, 'text/html');
          document.querySelector('#AppFrameMain').innerHTML = responseHTML.querySelector('#AppFrameMain').innerHTML;
          
          Turbolinks.dispatch("turbolinks:load");
          window.scroll(0, 0);
        })
      }
    })
  });
  
  TitleBar.create(app, {
    title: "<%= @rule.persisted? ? @rule.name : 'New' %>",
    buttons: {
      primary: saveButton,
      secondary: secondaryButtons
    },
    breadcrumbs: breadcrumb,
  });
</script>